ConstLanelet lanelet = map->laneletLayer.get(lanelet_begin_ID);
    ConstLanelet toLanelet = map->laneletLayer.get(to_lanelet_ID);
    Optional<routing::Route> route = routingGraph->getRoute(lanelet, toLanelet, 0);
    routing::LaneletPath shortestPath = route->shortestPath();
    std::cout<<shortestPath.size()<<std::endl;
    for (auto ll : shortestPath){
        std::cout<< "ID: "<< ll.id()<<std::endl;
    }
    /*
    auto centerline2d = lanelet::utils::to2D(shortestPath[1].centerline());
    BasicPoint2d pAt = geometry::interpolatedPointAtDistance(centerline2d, 0);
    std::cout<< "pat: "<< pAt(0,0) << pAt(1,0) <<std::endl;

    centerline2d = lanelet::utils::to2D(shortestPath[0].centerline());
    ArcCoordinates pAtt = geometry::toArcCoordinates(centerline2d, pAt);
    std::cout<< "pat Coordinates: "<< pAtt.distance <<" "<< pAtt.length <<std::endl;
    pAt = geometry::interpolatedPointAtDistance(centerline2d, pAtt.length);
    std::cout<< "pat: "<< pAt(0,0) << pAt(1,0) <<std::endl;
    */
    alglib::real_1d_array y_ref;
    alglib::real_1d_array x_ref;
    alglib::real_1d_array s_ref;
    y_ref.setlength(7);
    x_ref.setlength(7);
    s_ref.setlength(7);
    double s_record[7];
    s_record[0] = 0;
    alglib::spline1dinterpolant spl_ref_xs;
    alglib::spline1dinterpolant spl_ref_ys;

    auto centerline2d = lanelet::utils::to2D(shortestPath[0].centerline());
    BasicPoint2d pAt = geometry::interpolatedPointAtDistance(centerline2d, 0);
    std::cout<< "pat: "<< pAt(0,0) << pAt(1,0) <<std::endl;
    x_ref[0]= pAt(0,0);
    y_ref[0]= pAt(1,0);

    for (int j = 1; j < 6; j++) {
        centerline2d = lanelet::utils::to2D(shortestPath[j].centerline());
        pAt = geometry::interpolatedPointAtDistance(centerline2d, 0);
        std::cout<< "pat: "<< pAt(0,0) << pAt(1,0) <<std::endl;
        x_ref[j]= pAt(0,0);
        y_ref[j]= pAt(1,0);

        centerline2d = lanelet::utils::to2D(shortestPath[j-1].centerline());
        ArcCoordinates pAtt = geometry::toArcCoordinates(centerline2d, pAt);
        s_record[j] = pAtt.length;
    }
    centerline2d = lanelet::utils::to2D(shortestPath[5].centerline());
    pAt = geometry::interpolatedPointAtDistance(centerline2d, 10);
    std::cout<< "pat: "<< pAt(0,0) << pAt(1,0) <<std::endl;
    x_ref[6]= pAt(0,0);
    y_ref[6]= pAt(1,0);
    s_record[6] = 10;
    s_ref[0] = 0;
    for (int i = 1; i < 7; i++) {
        s_ref[i] = s_ref[i-1] + s_record[i];
        std::cout<< "s_ref: "<< s_ref[i] << " s_record: "<< s_record[i] << std::endl;
    }


    alglib::spline1dbuildcubic(s_ref, x_ref, spl_ref_xs);
    alglib::spline1dbuildcubic(s_ref, y_ref, spl_ref_ys);
    /*
    for (int i = 1; i < 700; i++){
        double xx = 0;
        double yy = 0;
        double dx = 0;
        double dy = 0;
        double d2x = 0;
        double d2y = 0;
        alglib::spline1ddiff(spl_ref_xs, 0.1 * i, xx, dx, d2x);
        alglib::spline1ddiff(spl_ref_ys, 0.1 * i, yy, dy, d2y);
        std::cout<<"2,"<< i <<","<< 100*i <<",car,"<< xx << ","<< yy<<",6.5473,0.266,0.0406,4.67,1.74"<< std::endl;
    }
    */
    y_ref.setlength(690000);
    x_ref.setlength(690000);
    s_ref.setlength(690000);
    s_ref[0]=0;
    LineString2d reference(utils::getId());
    for (int i = 0; i < 690000;i++){
        double xx = 0;
        double yy = 0;
        double dx = 0;
        double dy = 0;
        double d2x = 0;
        double d2y = 0;
        alglib::spline1ddiff(spl_ref_xs, i*0.0001, xx, dx, d2x);
        alglib::spline1ddiff(spl_ref_ys, i*0.0001, yy, dy, d2y);
        x_ref[i] = xx;
        y_ref[i] = yy;
        Point2d p(utils::getId(),xx,yy);
        reference.push_back(p);
        if (i>0) s_ref[i] = s_ref[i-1] + sqrt((xx-x_ref[i-1])*(xx-x_ref[i-1])+(yy-y_ref[i-1])*(yy-y_ref[i-1]));
    }
    alglib::spline1dbuildcubic(s_ref, x_ref, spl_ref_xs);
    alglib::spline1dbuildcubic(s_ref, y_ref, spl_ref_ys);
